gestageweeks +
wk32to38vitdng +
preeclampsia,
data = Train,
family = 'binomial')
STEP = step(null_fit,trace = 0,
direction = "both", scope=list(lower=formula(null_fit),
upper=formula(full_fit)),
steps = 2000)
summary(STEP)
par(mfrow=c(2,2))
plot(STEP, which = c(1:4), add.smooth = FALSE, pch=20, las = 1)
car::vif(STEP)
suppressMessages(suppressWarnings(pROC::auc(Test$Asthma ~                                                        predict(STEP, newdata = Test))))
suppressMessages(suppressWarnings(pROC::auc(Train$Asthma ~                                                        predict(STEP, newdata = Train))))
Model = step(full_fit,trace = 0,
direction = "both", scope=list(lower=formula(null_fit),
upper=formula(full_fit)),
steps = 2000)
summary(Model)
plot(Model, which = c(1:4), add.smooth = FALSE, pch=20, las = 1)
car::vif(Model)
suppressMessages(suppressWarnings(pROC::auc(Test$Asthma ~                                                        predict(Model, newdata = Test))))
suppressMessages(suppressWarnings(pROC::auc(Train$Asthma ~                                                        predict(Model, newdata = Train))))
eulerr::euler(list (STEP = names(coef(STEP)),
Model = names(coef(Model)))) %>% plot
selection = c(names(coef(STEP)) ,names(coef(Model))) %>% unique()
Train2 = Train %>% select(Asthma_P,
gestageweeks ,
wk32to38vitdng ,
preeclampsia,
selection[-c(1:4)]
)
Mod_2 =  glm(Asthma_P ~ .,
data = Train2,
family = 'binomial')
par(mfrow=c(1,3))
pROC::auc(Model$y ~ fitted.values(Model))
pROC::auc(Test$Asthma ~ predict(Model, newdata = Test))
pROC::auc(STEP$y ~ fitted.values(STEP))
pROC::auc(Test$Asthma ~ predict(STEP, newdata = Test))
pROC::auc(Mod_2$y ~ fitted.values(Mod_2))
pROC::auc(Test$Asthma ~ predict(Mod_2, newdata = Test))
par(mfrow=c(3,2))
pROC::roc(Model$y ~ fitted.values(Model)) %>% plot
pROC::roc(Test$Asthma ~ predict(Model, newdata = Test)) %>% plot
pROC::roc(STEP$y ~ fitted.values(STEP)) %>% plot
pROC::roc(Test$Asthma ~ predict(STEP, newdata = Test)) %>% plot()
pROC::roc(Mod_2$y ~ fitted.values(Mod_2)) %>% plot
pROC::roc(Test$Asthma ~ predict(Mod_2, newdata = Test)) %>% plot()
Train2$preeclampsia = ifelse(Train2$preeclampsia == "No", 0, 1)
pca = Train2 %>%
select(-Asthma_P) %>%
na.exclude() %>% t %>%
prcomp(., scale. = T, center = T)
plot(pca$rotation[,2],
pca$rotation[,3], col = Train2$Asthma_P + 1)
Train2 %>%
select(#Asthma_P,
-ENSG00000260804) %>%
as.matrix() %>%
na.exclude %>%
heatmap(., scale = "none")
Genes = out_GLM %>%
filter(pval < 0.05) %>%
filter(AUC > 0.6)%>%
filter(AUC_test > 0.6)%>%
pull(Var) %>%
unique()
Genes = out_GLM %>%
filter(pval < 0.05) %>%
filter(AUC > 0.65)%>%
filter(AUC_test > 0.65)%>%
pull(Var) %>%
unique()
rms = dic$Var[dic$Base %in% 'first6yrs']
Keep = Genes[Genes %ni% c(rms, "labnone", "Whizing_T")]
Keep = Genes[Genes %ni% c(rms, "labnone", "Whizing_T")]; Keep
FG = full %>%
select( all_of(Keep),
Asthma_P,
c('preeclampsia',
'gestageweeks',
wk32to38vitdng
)) %>%
na.exclude()
cors = FG %>%
select(starts_with("ENS")) %>%
cor() %>%
wTO::wTO(., sign = 'sign')
cors %>%
as.matrix %>%
heatmap(., symm = T, scale = 'none')
cor_l = (1 - abs(cors)) %>%
as.dist %>%
hclust() %>%
cutree( h = 0.8) %>%
as.data.frame()
names(cor_l)= "Cluster"
cor_l$Var = row.names(cor_l)
Vars = dplyr::inner_join(cor_l, out_GLM)
Genes_Selected = Vars %>%
group_by(Cluster) %>%
mutate(AUC_max = max(AUC))%>%
mutate(min_pval = min(pval)) %>%
filter(AUC == AUC_max | pval == min_pval) %>%
pull(Var)
Genes_Selected
FG = full %>%
select( all_of(Keep),
Asthma_P,
c('preeclampsia',
'gestageweeks',
wk32to38vitdng
)) %>%
na.exclude()
set.seed(123)
split_size = 0.7
IDs = sample(1:nrow(FG), size = split_size*nrow(FG))
Train = FG[IDs,]
Test = FG[-IDs,]
full_fit = glm(Asthma_P ~ .,
data = Train,
family = 'binomial')
null_fit = glm(Asthma_P ~
gestageweeks +
wk32to38vitdng +
preeclampsia,
data = Train,
family = 'binomial')
STEP = step(null_fit,trace = 0,
direction = "both", scope=list(lower=formula(null_fit),
upper=formula(full_fit)),
steps = 2000)
summary(STEP)
par(mfrow=c(2,2))
plot(STEP, which = c(1:4), add.smooth = FALSE, pch=20, las = 1)
car::vif(STEP)
suppressMessages(suppressWarnings(pROC::auc(Test$Asthma ~                                                        predict(STEP, newdata = Test))))
suppressMessages(suppressWarnings(pROC::auc(Train$Asthma ~                                                        predict(STEP, newdata = Train))))
Model = step(full_fit,trace = 0,
direction = "both", scope=list(lower=formula(null_fit),
upper=formula(full_fit)),
steps = 2000)
summary(Model)
plot(Model, which = c(1:4), add.smooth = FALSE, pch=20, las = 1)
car::vif(Model)
suppressMessages(suppressWarnings(pROC::auc(Test$Asthma ~                                                        predict(Model, newdata = Test))))
suppressMessages(suppressWarnings(pROC::auc(Train$Asthma ~                                                        predict(Model, newdata = Train))))
eulerr::euler(list (STEP = names(coef(STEP)),
Model = names(coef(Model)))) %>% plot
selection = c(names(coef(STEP)) ,names(coef(Model))) %>% unique()
Train2 = Train %>% select(Asthma_P,
gestageweeks ,
wk32to38vitdng ,
preeclampsia,
selection[-c(1:4)]
)
Mod_2 =  glm(Asthma_P ~ .,
data = Train2,
family = 'binomial')
par(mfrow=c(1,3))
pROC::auc(Model$y ~ fitted.values(Model))
pROC::auc(Test$Asthma ~ predict(Model, newdata = Test))
pROC::auc(STEP$y ~ fitted.values(STEP))
pROC::auc(Test$Asthma ~ predict(STEP, newdata = Test))
pROC::auc(Mod_2$y ~ fitted.values(Mod_2))
pROC::auc(Test$Asthma ~ predict(Mod_2, newdata = Test))
par(mfrow=c(3,2))
pROC::roc(Model$y ~ fitted.values(Model)) %>% plot
pROC::roc(Test$Asthma ~ predict(Model, newdata = Test)) %>% plot
pROC::roc(STEP$y ~ fitted.values(STEP)) %>% plot
pROC::roc(Test$Asthma ~ predict(STEP, newdata = Test)) %>% plot()
pROC::roc(Mod_2$y ~ fitted.values(Mod_2)) %>% plot
pROC::roc(Test$Asthma ~ predict(Mod_2, newdata = Test)) %>% plot()
Train2$preeclampsia = ifelse(Train2$preeclampsia == "No", 0, 1)
pca = Train2 %>%
select(-Asthma_P) %>%
na.exclude() %>% t %>%
prcomp(., scale. = T, center = T)
plot(pca$rotation[,2],
pca$rotation[,3], col = Train2$Asthma_P + 1)
Train2 %>%
select(#Asthma_P,
-ENSG00000260804) %>%
as.matrix() %>%
na.exclude %>%
heatmap(., scale = "none")
require(OptimalCutpoints)
pred = predict(STEP, newdata = Test)
data = data.frame(Pheno = Test$Asthma_P, Prob = pred)
optimal.cutpoint <-
OptimalCutpoints::optimal.cutpoints(X = "Prob",
status = "Pheno",
tag.healthy = 0,
methods = 'MaxSpSe',
pop.prev = NULL,
control = OptimalCutpoints::control.cutpoints(),
ci.fit = TRUE,
conf.level = 0.99,
trace = FALSE,
data = data)
require(OptimalCutpoints)
pred = predict(STEP, newdata = Test)
data = data.frame(Pheno = Test$Asthma_P, Prob = pred)
optimal.cutpoint <-
OptimalCutpoints::optimal.cutpoints(X = "Prob",
status = "Pheno",
tag.healthy = 0,
methods = 'MaxSpSe',
pop.prev = NULL,
control = OptimalCutpoints::control.cutpoints(),
ci.fit = TRUE,
conf.level = 0.99,
trace = FALSE,
data = data)
cf = 1.63#optimal.cutpoint$MaxSp$Global$optimal.cutoff$cutoff
data$out = ifelse(data$Prob > cf, 1, 0)
table(data$out, data$Pheno)
data$out = ifelse(data$Prob > cf, "I say Yes", "I say No")
table(data$out, data$Pheno)
optimal.cutpoint <-
OptimalCutpoints::optimal.cutpoints(X = "Prob",
status = "Pheno",
tag.healthy = 0,
methods = 'MaxSp',
pop.prev = NULL,
control = OptimalCutpoints::control.cutpoints(),
ci.fit = TRUE,
conf.level = 0.99,
trace = FALSE,
data = data)
cf = 1.63#optimal.cutpoint$MaxSp$Global$optimal.cutoff$cutoff
data$out = ifelse(data$Prob > cf, "I say Yes", "I say No")
table(data$out, data$Pheno)
optimal.cutpoint <-
OptimalCutpoints::optimal.cutpoints(X = "Prob",
status = "Pheno",
tag.healthy = 0,
methods = 'MaxSe',
pop.prev = NULL,
control = OptimalCutpoints::control.cutpoints(),
ci.fit = TRUE,
conf.level = 0.99,
trace = FALSE,
data = data)
cf = 1.63#optimal.cutpoint$MaxSp$Global$optimal.cutoff$cutoff
optimal.cutpoint$MaxSe$Global$optimal.cutoff$Se
optimal.cutpoint$MaxSe$Global$optimal.cutoff
optimal.cutpoint$MaxSe$Global$optimal.cutoff$cutoff
cf = optimal.cutpoint$MaxSe$Global$optimal.cutoff$cutoff#optimal.cutpoint$MaxSp$Global$optimal.cutoff$cutoff
data$out = ifelse(data$Prob > cf, "I say Yes", "I say No")
table(data$out, data$Pheno)
optimal.cutpoint
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
`%ni%` <- Negate(`%in%`)
library(tidyr)
require(magrittr)
require(data.table)
require(survival)
require(dplyr)
library(survminer)
dic = fread("~/Desktop/PostDoc/00_Projects/Asthma/00_Data/Complete_VDAART_README.csv")
full = fread('~/Desktop/PostDoc/00_Projects/Asthma/00_Data/Complete_VDAART.csv')
View(dic)
full %>% select(starts_with("lab"))
dim(full)
fit <- survfit(Surv(full$Asthma_T, full$Asthma_P) ~ 1)
plot(fit, las  =1)
ggsurvplot(fit, data = full, conf.int=FALSE)
fit <- survfit(Surv(full$Whizing_T, full$Whizing_P) ~ 1)
plot(fit, las  =1)
ggsurvplot(fit, data = full, conf.int=FALSE)
fit <- survfit(Surv(full$Asthma_T, full$Asthma_P) ~ full$preeclampsia + full$trmt)
plot(fit, las  =1)
ggsurvplot(fit, data = full, conf.int=FALSE)
fit <- survfit(Surv(full$Whizing_T, full$Whizing_P) ~ full$preeclampsia+ full$trmt)
plot(fit, las  =1)
ggsurvplot(fit, data = full, conf.int=FALSE)
fit <- survfit(Surv(full$Asthma_T, full$Asthma_P) ~ full$Whizing_P)
plot(fit, las  =1)
ggsurvplot(fit, data = full, conf.int=FALSE)
fit = survfit(Surv(full$Asthma_T, full$Asthma_P) ~ full$preeclampsia + full$trmt + full$pretermdelivery)
ggsurvplot(fit, data = full, conf.int=FALSE)
names(full %like% "lab")
View(dic)
View(full)
grep("c-sec", full)
full[grep("c-sec", full)]
full[grep("c-sec", full),1]
full[grep("c-sec", full)] %>% t() %>% View
grep("c-sec", full)
full[c(5511,5534)] %>% t() %>% View
full[c(5511,5534),] %>% t() %>% View
full[c(5511,5534),] %>% View
View(dic)
dic %>% filter(Base == "birth")
dic %>% filter(Base == "birth") %>% pull(Var)
xx = dic %>% filter(Base == "birth") %>% pull(Var)
full %>% select(all_of(xx))
full %>% select(all_of(xx)) %>% View
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
PPI = fread("PPI_Symbol_Entrez.csv") #PPI
GDA = fread("COVID19_genes.csv") # DusGeNet
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
GDA = fread("COVID19_genes.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F)
COVID = fread("COVID19_genes.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F)
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F)
gCOVID = gPPI %>% induced.subgraph(.,COVID$V1)
plot(gBP)
plot(gCOVID)
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$V1)
plot(gCOVID)
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
PPI = fread("PPI_Symbol_Entrez.csv") #PPI
COVID = fread("COVID19_genes.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$V1)
V(gBP)$label = NA
gBP %<>% simplify()
V(gBP)$size = degree(gBP)
V(gBP)$size = degree(gBP) %>% CoDiNA::normalize()
V(gBP)$size  = (V(gBP)$size + 0.1)*5
gBP %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gBP)
V(gBP)$label = ifelse(V(gBP)$size > 2.5, V(gBP)$name, NA)
E(gBP)$curved =0.1
plot(gBP)
V(gBP)$color = V(gBP)$frame.color = "red"
V(gBP)$label.color = "darkred"
V(gBP)$label.cex = V(gBP)$size/5
E(gBP)$color = 'salmon1'
plot(gBP)
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
PPI = fread("PPI_Symbol_Entrez.csv") #PPI
COVID = fread("COVID19_genes.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$V1)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
V(gCOVID)$size = degree(gCOVID)
V(gCOVID)$size = degree(gCOVID) %>% CoDiNA::normalize()
V(gCOVID)$size  = (V(gCOVID)$size + 0.1)*5
gCOVID %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gCOVID)
V(gCOVID)$label = ifelse(V(gCOVID)$size > 2.5, V(gCOVID)$name, NA)
E(gCOVID)$curved =0.1
plot(gCOVID)
V(gCOVID)$color = V(gCOVID)$frame.color = "red"
V(gCOVID)$label.color = "darkred"
V(gCOVID)$label.cex = V(gCOVID)$size/5
E(gCOVID)$color = 'salmon1'
plot(gCOVID)
require(NetSci)
LCC_BP = LCC_Significance(N = 1000,
Targets = COVID$V1,
G = gPPI)
LCC_BP$LCCZ %>% density() %>% plot
LCC = LCC_Significance(N = 1000,
Targets = COVID$V1,
G = gPPI)
Histogram_LCC(LCC)
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
PPI = fread("PPI_Symbol_Entrez.csv") #PPI
COVID = fread("COVID19_genes.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(Symbol_A) & !is.na(Symbol_B))%>%
filter(Symbol_A != "" & Symbol_B != "")
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F) %>% simplify()
DT = fread("drug_targets_all_0326.txt", header = F)
DT = fread("drug_targets_all_0326.txt", header = T)
DT = fread("drug_targets_all_0326.txt", header = T, sep = "\t")
PPI = fread("DatasetS1.csv") #PPI
View(PPI)
PPI = fread("DatasetS2.csv") #PPI
COVID = fread("DatasetS1.csv", header = F) #COVID Genes
View(PPI)
PPI %<>% filter(!is.na(proteinA_entrezid) & !is.na(proteinB_entrezid))
gPPI = graph_from_data_frame(PPI[, 3:4], directed = F) %>% simplify()
View(PPI)
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
PPI = fread("DatasetS2.csv") #PPI
COVID = fread("DatasetS1.csv", header = F) #COVID Genes
PPI %<>% filter(!is.na(proteinA_entrezid) & !is.na(proteinB_entrezid))
gPPI = graph_from_data_frame(PPI, directed = F) %>% simplify()
View(COVID)
rm(list = ls())
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
require(NetSci)
PPI = fread("DatasetS2.csv") #PPI
COVID = fread("DatasetS1.csv") #COVID Genes
PPI %<>% filter(!is.na(proteinA_entrezid) & !is.na(proteinB_entrezid))
gPPI = graph_from_data_frame(PPI, directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$V1)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
V(gCOVID)$size = degree(gCOVID)
V(gCOVID)$size = degree(gCOVID) %>% CoDiNA::normalize()
V(gCOVID)$size  = (V(gCOVID)$size + 0.1)*5
gCOVID %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gCOVID)
V(gCOVID)$label = ifelse(V(gCOVID)$size > 2.5, V(gCOVID)$name, NA)
E(gCOVID)$curved =0.1
plot(gCOVID)
gCOVID = gPPI %>% induced.subgraph(.,COVID$EntrezID)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
V(gCOVID)$size = degree(gCOVID)
V(gCOVID)$size = degree(gCOVID) %>% CoDiNA::normalize()
V(gCOVID)$size  = (V(gCOVID)$size + 0.1)*5
gCOVID %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gCOVID)
V(gCOVID)$label = ifelse(V(gCOVID)$size > 2.5, V(gCOVID)$name, NA)
E(gCOVID)$curved =0.1
plot(gCOVID)
V(gCOVID)$color = V(gCOVID)$frame.color = "red"
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
rm(list = ls())
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
require(NetSci)
PPI = fread("DatasetS2.csv") #PPI
COVID = fread("DatasetS1.csv") #COVID Genes
PPI %<>% filter(!is.na(proteinA_entrezid) & !is.na(proteinB_entrezid))
gPPI = graph_from_data_frame(PPI, directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$EntrezID)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
V(gCOVID)$size = degree(gCOVID)
V(gCOVID)$size = degree(gCOVID) %>% CoDiNA::normalize()
V(gCOVID)$size  = (V(gCOVID)$size + 0.1)*5
gCOVID %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gCOVID)
V(gCOVID)$label = ifelse(V(gCOVID)$size > 2.5, V(gCOVID)$name, NA)
E(gCOVID)$curved =0.1
plot(gCOVID)
PPI$proteinA_entrezidCOVID$EntrezID
COVID$EntrezID
gCOVID = gPPI %>% induced.subgraph(.,COVID$EntrezID %in% V(gPPI)$name)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
V(gCOVID)$size = degree(gCOVID)
V(gCOVID)$size = degree(gCOVID) %>% CoDiNA::normalize()
V(gCOVID)$size  = (V(gCOVID)$size + 0.1)*5
gCOVID %<>% delete.vertices(., degree(.) == 0)
coord = layout_with_fr(gCOVID)
V(gCOVID)$label = ifelse(V(gCOVID)$size > 2.5, V(gCOVID)$name, NA)
E(gCOVID)$curved =0.1
plot(gCOVID)
V(gCOVID)$color = V(gCOVID)$frame.color = "red"
V(gCOVID)$label.color = "darkred"
setwd("~/Dropbox (CCNR)/COVID-19/code/git/COVID-19/data/")
rm(list = ls())
library(tidyr)
require(magrittr)
require(data.table)
require(igraph)
require(dplyr)
require(NetSci)
PPI = fread("DatasetS2.csv") #PPI
COVID = fread("DatasetS1.csv") #COVID Genes
PPI %<>% filter(!is.na(proteinA_entrezid) & !is.na(proteinB_entrezid))
gPPI = graph_from_data_frame(PPI, directed = F) %>% simplify()
gCOVID = gPPI %>% induced.subgraph(.,COVID$EntrezID %in% V(gPPI)$name)
V(gCOVID)$label = NA
gCOVID %<>% simplify()
plot(gPPI)
plot(gCOVID)
